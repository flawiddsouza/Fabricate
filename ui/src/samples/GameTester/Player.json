{
  "name": "Player",
  "props": {
    "index": "number",
    "mode": "'Endpoint' | 'Direct'",
    "endpoint": "string",
    "matchType": "number",
    "stakesId": "number",
    "tournamentId": "number | null",
    "tableId": "number",
    "tablePassword": "string",
    "longitude": "number",
    "latitude": "number",
    "webSocketUrl": "string"
  },
  "variables": {
    "eventLog": [],
    "websocket": null,
    "gameWebsocket": null,
    "status": "...",
    "userId": null,
    "roomId": null,
    "turnUserId": null,
    "dealerUserId": null,
    "smallBlindUserId": null,
    "bigBlindUserId": null,
    "playerCurrentDecision": [],
    "raiseValues": [],
    "selectedRaiseValue": null
  },
  "Constants": {
    "Action": {
      "Check": 1,
      "Call": 2,
      "Raise": 3,
      "Fold": 4,
      "AllIn": 5,
      "SetHand": 6,
      "Discard": 7
    }
  },
  "computed": {
    "playerLoginDetails": "const stringUserId = String(vars.userId.value)\nreturn {\n  userName: `Test_${props.index}`,\n  loginType: '1',\n  deviceId: `test${props.index}`,\n  type: '2',\n  userId: vars.userId.value,\n  roomId: vars.roomId.value,\n  isUserTurn: String(vars.turnUserId.value) === stringUserId && vars.turnUserId.value !== null,\n  isDealer: vars.dealerUserId.value === stringUserId,\n  isSmallBlind: vars.smallBlindUserId.value === stringUserId,\n  isBigBlind: vars.bigBlindUserId.value === stringUserId,\n  isCheck: vars.playerCurrentDecision.value.includes(Constants.Action.Check),\n  isCall: vars.playerCurrentDecision.value.includes(Constants.Action.Call),\n  isRaise: vars.playerCurrentDecision.value.includes(Constants.Action.Raise),\n  isFold: vars.playerCurrentDecision.value.includes(Constants.Action.Fold),\n  isAllIn: vars.playerCurrentDecision.value.includes(Constants.Action.AllIn),\n  isSetHand: vars.playerCurrentDecision.value.includes(Constants.Action.SetHand),\n  isDiscard: vars.playerCurrentDecision.value.includes(Constants.Action.Discard),\n}",
    "playerLabels": "const labels = []\n\nif (vars.playerLoginDetails.value.isUserTurn) {\n  labels.push('Your Turn')\n}\n\nif (!vars.playerLoginDetails.value.isUserTurn && vars.turnUserId.value !== null) {\n  labels.push('Other Player Turn')\n}\n\nif (vars.playerLoginDetails.value.isDealer) {\n  labels.push('Dealer')\n}\n\nif (vars.playerLoginDetails.value.isSmallBlind) {\n  labels.push('Small Blind')\n}\n\nif (vars.playerLoginDetails.value.isBigBlind) {\n  labels.push('Big Blind')\n}\n\nreturn labels.join(' / ')"
  },
  "nodes": [
    {
      "element": "PlayerFrame",
      "ref": "playerFrame",
      "props": {
        "highlight": "playerLoginDetails.value.isUserTurn",
        "eventLog": "eventLog.value"
      },
      "slots": {
        "2": [
          {
            "element": "button",
            "vIf": "status === '...'",
            "on": {
              "click": "start"
            },
            "text": "Start"
          },
          {
            "element": "button",
            "vIf": "status !== '...'",
            "on": {
              "click": "gameplayHelper.takeASeat"
            },
            "text": "Take a seat"
          },
          {
            "element": "button",
            "vIf": "playerLoginDetails.isCheck",
            "on": {
              "click": "gameplayHelper.check"
            },
            "style": "margin-left: 0.5rem",
            "text": "Check"
          },
          {
            "element": "button",
            "vIf": "playerLoginDetails.isCall",
            "on": {
              "click": "gameplayHelper.call"
            },
            "style": "margin-left: 0.5rem",
            "text": "Call"
          },
          {
            "element": "template",
            "vIf": "playerLoginDetails.isRaise",
            "children": [
              {
                "element": "select",
                "vModel": "selectedRaiseValue",
                "style": "margin-left: 0.5rem",
                "children": [
                  {
                    "element": "option",
                    "vFor": "raiseValue in raiseValues",
                    "text": "{{ raiseValue.value }} ({{ raiseValue.percentage }}%)",
                    ":value": "raiseValue.value"
                  }
                ]
              },
              {
                "element": "button",
                "on": {
                  "click": "gameplayHelper.raise()"
                },
                "text": "Raise"
              }
            ]
          },
          {
            "element": "button",
            "vIf": "playerLoginDetails.isFold",
            "on": {
              "click": "gameplayHelper.fold()"
            },
            "style": "margin-left: 0.5rem",
            "text": "Fold"
          },
          {
            "element": "button",
            "vIf": "playerLoginDetails.isAllIn",
            "on": {
              "click": "gameplayHelper.allIn()"
            },
            "style": "margin-left: 0.5rem",
            "text": "All In"
          },
          {
            "element": "button",
            "vIf": "playerLoginDetails.isSetHand",
            "on": {
              "click": "gameplayHelper.setHand()"
            },
            "style": "margin-left: 0.5rem",
            "text": "Set Hand"
          },
          {
            "element": "button",
            "vIf": "playerLoginDetails.isDiscard",
            "on": {
              "click": "gameplayHelper.discard()"
            },
            "style": "margin-left: 0.5rem",
            "text": "Discard"
          }
        ],
        "3": [
          {
            "element": "text",
            "text": "{{ playerLabels.value }}",
            "children": []
          }
        ],
        "1-left": [
          {
            "element": "text",
            "text": "Player: {{ playerLoginDetails.value.userName }} / User ID: {{ playerLoginDetails.value.userId }} / Room ID: {{ playerLoginDetails.value.roomId }} ({{ status.value }})",
            "children": []
          }
        ],
        "1-right": [
          {
            "element": "text",
            "text": "{{ timer.formattedTime.value }}",
            "children": []
          }
        ]
      },
      "children": []
    }
  ],
  "script": "async function login() {\n  const body = {\n    user_name: playerLoginDetails.value.userName,\n    login_type: playerLoginDetails.value.loginType,\n    device_id: playerLoginDetails.value.deviceId,\n    type: playerLoginDetails.value.type\n  }\n\n  addEventLog('sent', JSON.stringify({\n    api_call: 'user/login',\n    body\n  }))\n\n  const response = await fetch(`${props.endpoint}/user/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  })\n\n  const data = await response.json()\n\n  addEventLog('received', JSON.stringify({\n    api_call: 'user/login',\n    data\n  }))\n\n  return {\n    websocketUrl: data.responseData.websocket_url,\n    accessToken: data.responseData.access_token,\n    userId: data.responseData.user_id\n  }\n}\n\nasync function roomJoin(accessToken) {\n  const body = {\n    match_type: props.matchType,\n  }\n\n  if (props.matchType === 1) {\n    body.stakes_id = props.stakesId\n  }\n\n  if (props.matchType === 2 && props.tournamentId !== null) {\n    body.tournament_id = props.tournamentId\n  }\n\n  addEventLog('sent', JSON.stringify({\n    api_call: 'room/join',\n    body\n  }))\n\n  const response = await fetch(`${props.endpoint}/room/join`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'access_token': accessToken\n    },\n    body: JSON.stringify(body)\n  })\n\n  const data = await response.json()\n\n  addEventLog('received', JSON.stringify({\n    api_call: 'room/join',\n    data\n  }))\n}\n\nasync function clubJoinTable(accessToken) {\n  const body = {\n    table_id: props.tableId,\n    password: props.tablePassword,\n    longitude: props.longitude,\n    latitude: props.latitude\n  }\n\n  addEventLog('sent', JSON.stringify({\n    api_call: 'club/join_table',\n    body\n  }))\n\n  const response = await fetch(`${props.endpoint}/club/joinTable`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'access_token': accessToken\n    },\n    body: JSON.stringify(body)\n  })\n\n  const data = await response.json()\n\n  addEventLog('received', JSON.stringify({\n    api_call: 'club/join_table',\n    data\n  }))\n}\n\nfunction addEventLog(type, message) {\n  eventLog.value.push({\n    type,\n    timestamp: new Date().toISOString(),\n    message\n  })\n\n  if (playerFrame.value) {\n    playerFrame.value.scrollEventLogToBottom()\n  }\n}\n\nfunction initApiWebSocket(websocketUrl, accessToken) {\n  websocket.value = new WebSocket(websocketUrl)\n\n  websocket.value.onopen = async() => {\n    addEventLog('info', 'API Socket Connected')\n    if (props.matchType === 3) {\n      await clubJoinTable(accessToken)\n    } else {\n      await roomJoin(accessToken)\n    }\n  }\n\n  websocket.value.onmessage = (event) => {\n    addEventLog('received', event.data)\n\n    const parsedEvent = JSON.parse(event.data)\n\n    status.value = parsedEvent.event_name\n\n    if (parsedEvent.event_name === 'match_initiated') {\n      initGameWebSocket(parsedEvent.event_data.websocket_url)\n    }\n  }\n\n  websocket.value.onclose = () => {\n    addEventLog('info', 'API Socket Disconnected')\n  }\n}\n\nfunction initGameWebSocket(gameWebsocketUrl) {\n  gameWebsocket.value = new WebSocket(gameWebsocketUrl)\n\n  gameWebsocket.value.onopen = () => {\n    addEventLog('info', 'Game Socket Connected')\n  }\n\n  gameWebsocket.value.onmessage = (gameEvent) => {\n    addEventLog('received', gameEvent.data)\n\n    const parsedGameEvent = JSON.parse(gameEvent.data)\n\n    status.value = parsedGameEvent.event_name\n\n    handleGameEvent(parsedGameEvent)\n  }\n\n  gameWebsocket.value.onclose = () => {\n    addEventLog('info', 'Game Socket Disconnected')\n    resetPlayer()\n  }\n}\n\nfunction resetPlayer() {\n  websocket.value?.close()\n  userId.value = null\n  roomId.value = null\n  status.value = '...'\n  turnUserId.value = null\n  dealerUserId.value = null\n  smallBlindUserId.value = null\n  bigBlindUserId.value = null\n  playerCurrentDecision.value = []\n}\n\nasync function start() {\n  if (status.value !== '...') {\n    return\n  }\n\n  status.value = 'Starting'\n\n  if (props.mode === 'Endpoint') {\n    const authData = await login()\n\n    userId.value = authData.userId\n\n    initApiWebSocket(authData.websocketUrl, authData.accessToken)\n  }\n\n  if (props.mode === 'Direct') {\n    userId.value = props.index\n    initGameWebSocket(props.webSocketUrl + `?player_session_id=User${props.index}`)\n  }\n}\n\nfunction handleGameEvent(event) {\n  if (event.event_name === 'on_room_join') {\n    const { room_id } = event.event_data\n\n    roomId.value = room_id\n  }\n\n  if (event.event_name === 'match_starting' || event.event_name === 'deal_update' || event.event_name === 'turn_update' || event.event_name === 'enable_time_bank') {\n    const { remaining_time } = event.event_data\n\n    timer.setTime(remaining_time)\n    timer.start()\n  }\n\n  if (event.event_name === 'deal_update' || event.event_name === 'turn_update') {\n    const { player_turn_id, player_current_decision, raise_values } = event.event_data\n\n    turnUserId.value = player_turn_id\n    playerCurrentDecision.value = player_current_decision\n    raiseValues.value = raise_values\n    selectedRaiseValue.value = null\n  }\n\n  if (event.event_name === 'deal_update') {\n    const { dealer_id, small_blind_player_id, big_blind_player_id } = event.event_data\n\n    dealerUserId.value = dealer_id\n    smallBlindUserId.value = small_blind_player_id\n    bigBlindUserId.value = big_blind_player_id\n  }\n\n  if (event.event_name === 'on_room_left') {\n    gameWebsocket.value?.close()\n  }\n\n  if (event.event_name === 'rematch_player') {\n    gameWebsocket.value?.close()\n  }\n}\n\nfunction gameWebsocketSend(data) {\n  const toSend = JSON.stringify(data)\n\n  gameWebsocket.value?.send(toSend)\n  addEventLog('sent', toSend)\n}\n\nfunction sendUserDecision(userDecision, playerAmount) {\n  gameWebsocketSend({\n    event_name: 'user_decision',\n    room_id: roomId.value,\n    user_id: userId.value?.toString(),\n    user_decision: userDecision,\n    player_amount: playerAmount\n  })\n}\n\nconst gameplayHelper = {\n  takeASeat() {\n    const position = prompt('Enter position (1-9)')\n\n    if (!position) {\n      return\n    }\n\n    if (isNaN(Number(position)) || Number(position) < 1 || Number(position) > 9) {\n      alert('Invalid position')\n      return\n    }\n\n    gameWebsocketSend({\n      event_name: 'assign_player_position',\n      position: Number(position)\n    })\n  },\n\n  check() {\n    sendUserDecision(Constants.Action.Check, 0)\n  },\n\n  call() {\n    sendUserDecision(Constants.Action.Call, 0)\n  },\n\n  raise() {\n    if (selectedRaiseValue.value === null) {\n      alert('Select raise value')\n      return\n    }\n\n    sendUserDecision(Constants.Action.Raise, selectedRaiseValue.value)\n  },\n\n  fold() {\n    sendUserDecision(Constants.Action.Fold, 0)\n  },\n\n  allIn() {\n    sendUserDecision(Constants.Action.AllIn, 0)\n  },\n\n  setHand() {\n    alert('Not implemented')\n  },\n\n  discard() {\n    alert('Not implemented')\n  },\n}\n\ndefineExpose({\n  start\n})\n\ndefineMethods({\n  start,\n  gameplayHelper\n})\n"
}
