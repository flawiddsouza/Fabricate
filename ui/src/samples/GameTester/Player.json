{
  "name": "Player",
  "props": {
    "index": "number",
    "mode": "'Endpoint' | 'Direct'",
    "endpoint": "string",
    "matchType": "number",
    "stakesId": "number",
    "tournamentId": "number | null",
    "tableId": "number",
    "tablePassword": "string",
    "longitude": "number",
    "latitude": "number",
    "webSocketUrl": "string"
  },
  "variables": {
    "eventLog": [],
    "websocket": null,
    "gameWebsocket": null,
    "status": "...",
    "userId": null,
    "roomId": null,
    "turnUserId": null,
    "dealerUserId": null,
    "smallBlindUserId": null,
    "bigBlindUserId": null,
    "playerCurrentDecision": [],
    "raiseValues": [],
    "selectedRaiseValue": null
  },
  "Constants": {
    "Action": {
      "Check": 1,
      "Call": 2,
      "Raise": 3,
      "Fold": 4,
      "AllIn": 5,
      "SetHand": 6,
      "Discard": 7
    }
  },
  "computed": {
    "playerLoginDetails": "const stringUserId = String(vars.userId.value)\nreturn {\n  userName: `Test_${props.index}`,\n  loginType: '1',\n  deviceId: `test${props.index}`,\n  type: '2',\n  userId: vars.userId.value,\n  roomId: vars.roomId.value,\n  isUserTurn: String(vars.turnUserId.value) === stringUserId && vars.turnUserId.value !== null,\n  isDealer: vars.dealerUserId.value === stringUserId,\n  isSmallBlind: vars.smallBlindUserId.value === stringUserId,\n  isBigBlind: vars.bigBlindUserId.value === stringUserId,\n  isCheck: vars.playerCurrentDecision.value.includes(Constants.Action.Check),\n  isCall: vars.playerCurrentDecision.value.includes(Constants.Action.Call),\n  isRaise: vars.playerCurrentDecision.value.includes(Constants.Action.Raise),\n  isFold: vars.playerCurrentDecision.value.includes(Constants.Action.Fold),\n  isAllIn: vars.playerCurrentDecision.value.includes(Constants.Action.AllIn),\n  isSetHand: vars.playerCurrentDecision.value.includes(Constants.Action.SetHand),\n  isDiscard: vars.playerCurrentDecision.value.includes(Constants.Action.Discard),\n}",
    "playerLabels": "const labels = []\n\nif (vars.playerLoginDetails.value.isUserTurn) {\n  labels.push('Your Turn')\n}\n\nif (!vars.playerLoginDetails.value.isUserTurn && vars.turnUserId.value !== null) {\n  labels.push('Other Player Turn')\n}\n\nif (vars.playerLoginDetails.value.isDealer) {\n  labels.push('Dealer')\n}\n\nif (vars.playerLoginDetails.value.isSmallBlind) {\n  labels.push('Small Blind')\n}\n\nif (vars.playerLoginDetails.value.isBigBlind) {\n  labels.push('Big Blind')\n}\n\nreturn labels.join(' / ')"
  },
  "nodes": [
    {
      "element": "PlayerFrame",
      "props": {
        "highlight": "playerLoginDetails.value.isUserTurn",
        "eventLog": "eventLog.value"
      },
      "slots": {
        "1-left": [
          {
            "element": "text",
            "text": "Player: {{ playerLoginDetails.value.userName }} / User ID: {{ playerLoginDetails.value.userId }} / Room ID: {{ playerLoginDetails.value.roomId }} ({{ status.value }})",
            "children": []
          }
        ],
        "1-right": [
          {
            "element": "text",
            "text": "timer",
            "children": []
          }
        ],
        "3": [
          {
            "element": "text",
            "text": "{{ playerLabels.value }}",
            "children": []
          }
        ]
      },
      "children": []
    }
  ]
}
